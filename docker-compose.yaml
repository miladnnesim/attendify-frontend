services:
  wordpress:
    env_file: ./.env
    build:
      context: .
      dockerfile: Dockerfile-wordpress
    image: wordpress:latest
    ports:
      - "30011:80"
    volumes:
      - ./.docker/uploads:/var/www/html/wp-content/uploads
      - ./wp-content:/var/www/html/wp-content
      - ./rabbitmq:/var/www/html/rabbitmq
      - ./vendor:/var/www/html/vendor
    environment:
      - WORDPRESS_DB_HOST=${LOCAL_DB_HOST} # tijdelijk lokale MySQL container
      - WORDPRESS_DB_USER=${LOCAL_DB_USER}
      - WORDPRESS_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - WORDPRESS_DB_NAME=${LOCAL_DB_NAME}
      - WORDPRESS_TABLEPREFIX=wp
      - WORDPRESS_DEBUG=1

  db:
    env_file: ./.env
    image: mysql:8.0
    environment:
      - MYSQL_ROOT_PASSWORD=${LOCAL_DB_PASSWORD}
      - MYSQL_DATABASE=${LOCAL_DB_NAME}
    volumes:
      - ./.docker/mysql-data:/var/lib/mysql

  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    ports:
      - "8080:80"
    environment:
      - PMA_HOST=${LOCAL_DB_HOST}
      - PMA_USER=${LOCAL_DB_USER}
      - PMA_PASSWORD=${LOCAL_DB_PASSWORD}
      - PMA_ARBITRARY=1

  consumer-user:
    env_file: ./.env
    image: wordpress:latest
    build:
      context: .
      dockerfile: dockerfile-consumer
    volumes:
      - ./wp-content:/var/www/html/wp-content
      - ./rabbitmq:/var/www/html/rabbitmq
      - ./vendor:/var/www/html/vendor
    environment:
      - WORDPRESS_DB_HOST=${LOCAL_DB_HOST}
      - WORDPRESS_DB_USER=${LOCAL_DB_USER}
      - WORDPRESS_DB_PASSWORD=${LOCAL_DB_PASSWORD}
      - WORDPRESS_DB_NAME=${LOCAL_DB_NAME}
    command: php /var/www/html/rabbitmq/consumer.php
    depends_on:
      - db
    restart: always
